const os = require("os");
const axios = require("axios");
const { writeFile } = require("node:fs/promises");
const { readFileSync } = require("fs");
const { exec } = require("child_process");

const GITLAB_PROJECT_ID = "41287973";
const JSON_DIRECTORY = "data/gamedata";
const TYPE_DIRECTORY = "src/types";

module.exports = () => {
  const getFileFromGitlab = async (filePath) => {
    const res = await axios.get(
      `https://gitlab.com/api/v4/projects/${GITLAB_PROJECT_ID}/repository/files/${encodeURIComponent(
        filePath
      )}/raw?ref=master`
    );
    return res.data;
  };

  const gameDataPaths = [
    "ExcelBinOutput/AvatarSkillDepotExcelConfigData.json",
    "ExcelBinOutput/ReliquaryExcelConfigData.json",
    "ExcelBinOutput/WeaponExcelConfigData.json",
    "ExcelBinOutput/ReliquaryMainPropExcelConfigData.json",
    "ExcelBinOutput/ReliquaryAffixExcelConfigData.json",
  ];

  Promise.all(gameDataPaths.map((path) => getFileFromGitlab(path))).then(
    (data) => {
      data.forEach((_data, index) => {
        const fileName = gameDataPaths[index].split("/")[1];
        const filePath = `${JSON_DIRECTORY}/${fileName}`;

        writeFile(filePath, JSON.stringify(_data)).then(() => {
          const typeFilePath = `${TYPE_DIRECTORY}/${fileName.replace(
            ".json",
            ".ts"
          )}`;

          exec(`quicktype ${filePath} -o ${typeFilePath}  --just-types`, () => {
            const file = readFileSync(typeFilePath, "utf8");
            const index = file.indexOf(";\n}") + 3;
            const newFile = (file.slice(0, index) + "[]" + file.slice(index))
              .replace("export interface", "export type")
              .replace("{", "= {");
            writeFile(typeFilePath, newFile);
          });
        });
      });
    }
  );

  writeFile(
    "./src/gamedata.ts",
    `
/* Generated by scripts/gen.js */
  
import { readFileSync } from "node:fs";
import { resolve } from "node:path";
  
${gameDataPaths
  .map(
    (path) =>
      `import { ${path
        .split("/")[1]
        .replace(".json", "")} } from "./types/${path
        .split("/")[1]
        .replace(".json", "")}";`
  )
  .join(os.EOL)}
  
class GameData {
${gameDataPaths
  .map(
    (path) =>
      `  public static ${path
        .split("/")[1]
        .replace(".json", "")} = this.readFile<${path
        .split("/")[1]
        .replace(".json", "")}>(resolve(__dirname, "../data/gamedata/${
        path.split("/")[1]
      }"));`
  )
  .join(os.EOL)}
  private static readFile<T>(filePath: string) {
    try {
      const file = readFileSync(filePath);
      if (file === undefined) {
        throw new Error(\`File \${filePath} is undefined\`);
      }
      return JSON.parse(file.toString()) as T;
    } catch (error) {
      throw error;
    }
  }
}
  
export default GameData;
  `
  );
};
